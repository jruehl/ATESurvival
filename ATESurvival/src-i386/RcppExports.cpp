// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ATE_IF_WBS
List ATE_IF_WBS(const std::vector< arma::mat >& Z, const arma::vec& event, const arma::vec& time, const NumericVector& t, const std::vector< arma::vec >& beta, const std::vector< int >& index_A, const Rcpp::Nullable<Rcpp::NumericVector>& trunc_time_init, const int& cause, const bool& IF, const bool& WBS, const int& bs_iter, const double& level, const bool& arms);
RcppExport SEXP _ATESurvival_ATE_IF_WBS(SEXP ZSEXP, SEXP eventSEXP, SEXP timeSEXP, SEXP tSEXP, SEXP betaSEXP, SEXP index_ASEXP, SEXP trunc_time_initSEXP, SEXP causeSEXP, SEXP IFSEXP, SEXP WBSSEXP, SEXP bs_iterSEXP, SEXP levelSEXP, SEXP armsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector< arma::mat >& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::vec >& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector< int >& >::type index_A(index_ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector>& >::type trunc_time_init(trunc_time_initSEXP);
    Rcpp::traits::input_parameter< const int& >::type cause(causeSEXP);
    Rcpp::traits::input_parameter< const bool& >::type IF(IFSEXP);
    Rcpp::traits::input_parameter< const bool& >::type WBS(WBSSEXP);
    Rcpp::traits::input_parameter< const int& >::type bs_iter(bs_iterSEXP);
    Rcpp::traits::input_parameter< const double& >::type level(levelSEXP);
    Rcpp::traits::input_parameter< const bool& >::type arms(armsSEXP);
    rcpp_result_gen = Rcpp::wrap(ATE_IF_WBS(Z, event, time, t, beta, index_A, trunc_time_init, cause, IF, WBS, bs_iter, level, arms));
    return rcpp_result_gen;
END_RCPP
}
// EBS
arma::vec EBS(const std::vector< arma::mat >& Z, const arma::vec& event, const arma::vec& time, const NumericVector& t, const std::vector< arma::vec >& beta, const std::vector< int >& index_A, const Rcpp::Nullable<Rcpp::NumericVector>& factor_init, const Rcpp::Nullable<Rcpp::NumericVector>& trunc_time_init, const int& cause);
RcppExport SEXP _ATESurvival_EBS(SEXP ZSEXP, SEXP eventSEXP, SEXP timeSEXP, SEXP tSEXP, SEXP betaSEXP, SEXP index_ASEXP, SEXP factor_initSEXP, SEXP trunc_time_initSEXP, SEXP causeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector< arma::mat >& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const std::vector< arma::vec >& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const std::vector< int >& >::type index_A(index_ASEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector>& >::type factor_init(factor_initSEXP);
    Rcpp::traits::input_parameter< const Rcpp::Nullable<Rcpp::NumericVector>& >::type trunc_time_init(trunc_time_initSEXP);
    Rcpp::traits::input_parameter< const int& >::type cause(causeSEXP);
    rcpp_result_gen = Rcpp::wrap(EBS(Z, event, time, t, beta, index_A, factor_init, trunc_time_init, cause));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ATESurvival_ATE_IF_WBS", (DL_FUNC) &_ATESurvival_ATE_IF_WBS, 13},
    {"_ATESurvival_EBS", (DL_FUNC) &_ATESurvival_EBS, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_ATESurvival(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
